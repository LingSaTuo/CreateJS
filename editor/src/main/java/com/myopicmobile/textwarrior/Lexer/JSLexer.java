package com.myopicmobile.textwarrior.Lexer;/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2015  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */


import com.myopicmobile.textwarrior.common.JFlex;
import com.myopicmobile.textwarrior.common.JavaScriptType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administrator/Downloads/jflex-1.6.1/examples/java/new 2.flex</tt>
 */
public class JSLexer implements JFlex{

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\12\1\73\1\3\1\2\1\6\1\7\1\1\16\12\4\0\1\72"+
    "\1\76\1\27\1\72\1\11\1\107\1\104\1\30\1\61\1\62\1\5"+
    "\1\103\1\70\1\26\1\24\1\4\1\13\1\21\1\110\1\20\1\111"+
    "\1\22\1\114\1\112\1\113\1\14\1\102\1\67\1\75\1\71\1\74"+
    "\1\100\1\101\3\17\1\23\1\25\1\23\5\11\1\15\13\11\1\16"+
    "\2\11\1\65\1\31\1\66\1\106\1\11\1\0\1\35\1\32\1\37"+
    "\1\50\1\34\1\52\1\51\1\42\1\46\1\11\1\36\1\43\1\56"+
    "\1\45\1\44\1\54\1\11\1\33\1\40\1\41\1\47\1\60\1\57"+
    "\1\53\1\55\1\11\1\63\1\105\1\64\1\77\6\12\1\10\32\12"+
    "\2\0\4\11\4\0\1\11\2\0\1\12\7\0\1\11\4\0\1\11"+
    "\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11\16\0\5\11"+
    "\7\0\1\11\1\0\1\11\21\0\160\12\5\11\1\0\2\11\2\0"+
    "\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0\24\11\1\0"+
    "\123\11\1\0\213\11\1\0\5\12\2\0\236\11\11\0\46\11\2\0"+
    "\1\11\7\0\47\11\7\0\1\11\1\0\55\12\1\0\1\12\1\0"+
    "\2\12\1\0\2\12\1\0\1\12\10\0\33\11\5\0\3\11\15\0"+
    "\5\12\6\0\1\11\4\0\13\12\5\0\53\11\37\12\4\0\2\11"+
    "\1\12\143\11\1\0\1\11\10\12\1\0\6\12\2\11\2\12\1\0"+
    "\4\12\2\11\12\12\3\11\2\0\1\11\17\0\1\12\1\11\1\12"+
    "\36\11\33\12\2\0\131\11\13\12\1\11\16\0\12\12\41\11\11\12"+
    "\2\11\4\0\1\11\5\0\26\11\4\12\1\11\11\12\1\11\3\12"+
    "\1\11\5\12\22\0\31\11\3\12\104\0\1\11\1\0\13\11\67\0"+
    "\33\12\1\0\4\12\66\11\3\12\1\11\22\12\1\11\7\12\12\11"+
    "\2\12\2\0\12\12\1\0\7\11\1\0\7\11\1\0\3\12\1\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0"+
    "\4\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\1\11"+
    "\10\0\1\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\4\11"+
    "\7\0\1\11\5\0\3\12\1\0\6\11\4\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\12"+
    "\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12\7\0\4\11"+
    "\1\0\1\11\7\0\14\12\3\11\1\12\13\0\3\12\1\0\11\11"+
    "\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\2\0\1\12\1\11\10\12\1\0\3\12\1\0\3\12\2\0\1\11"+
    "\17\0\2\11\2\12\2\0\12\12\1\0\1\11\17\0\3\12\1\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0"+
    "\5\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\10\0"+
    "\2\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\1\0\1\11"+
    "\20\0\1\12\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0"+
    "\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0"+
    "\14\11\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\11\6\0"+
    "\1\12\16\0\12\12\11\0\1\11\7\0\3\12\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\3\0\1\11\7\12"+
    "\1\0\3\12\1\0\4\12\7\0\2\12\1\0\2\11\6\0\2\11"+
    "\2\12\2\0\12\12\22\0\2\12\1\0\10\11\1\0\3\11\1\0"+
    "\27\11\1\0\12\11\1\0\5\11\2\0\1\12\1\11\7\12\1\0"+
    "\3\12\1\0\4\12\7\0\2\12\7\0\1\11\1\0\2\11\2\12"+
    "\2\0\12\12\1\0\2\11\17\0\2\12\1\0\10\11\1\0\3\11"+
    "\1\0\51\11\2\0\1\11\7\12\1\0\3\12\1\0\4\12\1\11"+
    "\10\0\1\12\10\0\2\11\2\12\2\0\12\12\12\0\6\11\2\0"+
    "\2\12\1\0\22\11\3\0\30\11\1\0\11\11\1\0\1\11\2\0"+
    "\7\11\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10\12\22\0"+
    "\2\12\15\0\60\11\1\12\2\11\7\12\4\0\10\11\10\12\1\0"+
    "\12\12\47\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\0\4\11\1\12\2\11\6\12\1\0\2\12"+
    "\1\11\2\0\5\11\1\0\1\11\1\0\6\12\2\0\12\12\2\0"+
    "\4\11\40\0\1\11\27\0\2\12\6\0\12\12\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\4\0\2\12\10\11\1\0\44\11\4\0\24\12"+
    "\1\0\2\12\5\11\13\12\1\0\44\12\11\0\1\12\71\0\53\11"+
    "\24\12\1\11\12\12\6\0\6\11\4\12\4\11\3\12\1\11\3\12"+
    "\2\11\7\12\3\11\4\12\15\11\14\12\1\11\17\12\2\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11"+
    "\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11"+
    "\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\12"+
    "\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11\1\0\32\11"+
    "\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11\3\12\13\0"+
    "\22\11\3\12\13\0\22\11\2\12\14\0\15\11\1\0\3\11\1\0"+
    "\2\12\14\0\64\11\40\12\3\0\1\11\3\0\2\11\1\12\2\0"+
    "\12\12\41\0\3\12\2\0\12\12\6\0\130\11\10\0\51\11\1\12"+
    "\1\11\5\0\106\11\12\0\35\11\3\0\14\12\4\0\14\12\12\0"+
    "\12\12\36\11\2\0\5\11\13\0\54\11\4\0\21\12\7\11\2\12"+
    "\6\0\12\12\46\0\27\11\5\12\4\0\65\11\12\12\1\0\35\12"+
    "\2\0\13\12\6\0\12\12\15\0\1\11\130\0\5\12\57\11\21\12"+
    "\7\11\4\0\12\12\21\0\11\12\14\0\3\12\36\11\15\12\2\11"+
    "\12\12\54\11\16\12\14\0\44\11\24\12\10\0\12\12\3\0\3\11"+
    "\12\12\44\11\122\0\3\12\1\0\25\12\4\11\1\12\4\11\3\12"+
    "\2\11\11\0\300\11\47\12\25\0\4\12\u0116\11\2\0\6\11\2\0"+
    "\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0"+
    "\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11\5\0"+
    "\3\11\1\0\7\11\16\0\5\12\30\0\1\6\1\6\5\12\20\0"+
    "\2\11\23\0\1\11\13\0\5\12\5\0\6\12\1\0\1\11\15\0"+
    "\1\11\20\0\15\11\3\0\33\11\25\0\15\12\4\0\1\12\3\0"+
    "\14\12\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0"+
    "\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0"+
    "\13\11\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11\u0a77\0"+
    "\57\11\1\0\57\11\1\0\205\11\6\0\4\11\3\12\2\11\14\0"+
    "\46\11\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0"+
    "\1\12\27\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\12"+
    "\57\0\1\11\u01d5\0\3\11\31\0\11\11\6\12\1\0\5\11\2\0"+
    "\5\11\4\0\126\11\2\0\2\12\2\0\3\11\1\0\132\11\1\0"+
    "\4\11\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0"+
    "\u19b6\11\112\0\u51cd\11\63\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0"+
    "\20\11\12\12\2\11\24\0\57\11\1\12\4\0\12\12\1\0\31\11"+
    "\7\0\1\12\120\11\2\12\45\0\11\11\2\0\147\11\2\0\4\11"+
    "\1\0\4\11\14\0\13\11\115\0\12\11\1\12\3\11\1\12\4\11"+
    "\1\12\27\11\5\12\20\0\1\11\7\0\64\11\14\0\2\12\62\11"+
    "\21\12\13\0\12\12\6\0\22\12\6\11\3\0\1\11\4\0\12\12"+
    "\34\11\10\12\2\0\27\11\15\12\14\0\35\11\3\0\4\12\57\11"+
    "\16\12\16\0\1\11\12\12\46\0\51\11\16\12\11\0\3\11\1\12"+
    "\10\11\2\12\2\0\12\12\6\0\27\11\3\0\1\11\1\12\4\0"+
    "\60\11\1\12\1\11\3\12\2\11\2\12\5\11\2\12\1\11\1\12"+
    "\1\11\30\0\3\11\2\0\13\11\5\12\2\0\3\11\2\12\12\0"+
    "\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\221\0"+
    "\43\11\10\12\1\0\2\12\2\0\12\12\6\0\u2ba4\11\14\0\27\11"+
    "\4\0\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0\5\11"+
    "\5\0\1\11\1\12\12\11\1\0\15\11\1\0\5\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11"+
    "\2\0\66\11\50\0\15\11\3\0\20\12\20\0\7\12\14\0\2\11"+
    "\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\12"+
    "\4\0\1\11\13\0\12\12\7\0\32\11\4\0\1\11\1\0\32\11"+
    "\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11"+
    "\3\0\2\11\3\0\2\11\22\0\3\12\4\0\14\11\1\0\32\11"+
    "\1\0\23\11\1\0\2\11\1\0\17\11\2\0\16\11\42\0\173\11"+
    "\105\0\65\11\210\0\1\12\202\0\35\11\3\0\61\11\57\0\37\11"+
    "\21\0\33\11\65\0\36\11\2\0\44\11\4\0\10\11\1\0\5\11"+
    "\52\0\236\11\2\0\12\12\u0356\0\6\11\2\0\1\11\1\0\54\11"+
    "\1\0\2\11\3\0\1\11\2\0\27\11\252\0\26\11\12\0\32\11"+
    "\106\0\70\11\6\0\2\11\100\0\1\11\3\12\1\0\2\12\5\0"+
    "\4\12\4\11\1\0\3\11\1\0\33\11\4\0\3\12\4\0\1\12"+
    "\40\0\35\11\203\0\66\11\12\0\26\11\12\0\23\11\215\0\111\11"+
    "\u03b7\0\3\12\65\11\17\12\37\0\12\12\20\0\3\12\55\11\13\12"+
    "\2\0\1\12\22\0\31\11\7\0\12\12\6\0\3\12\44\11\16\12"+
    "\1\0\12\12\100\0\3\12\60\11\16\12\4\11\13\0\12\12\u04a6\0"+
    "\53\11\15\12\10\0\12\12\u0936\0\u036f\11\221\0\143\11\u0b9d\0\u042f\11"+
    "\u33d1\0\u0239\11\u04c7\0\105\11\13\0\1\11\56\12\20\0\4\12\15\11"+
    "\u4060\0\2\11\u2163\0\5\12\3\0\26\12\2\0\7\12\36\0\4\12"+
    "\224\0\3\12\u01bb\0\125\11\1\0\107\11\1\0\2\11\2\0\1\11"+
    "\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11"+
    "\1\0\101\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0\34\11"+
    "\1\0\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0\u0154\11"+
    "\2\0\31\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11"+
    "\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\10\11\2\0\62\12\u1600\0\4\11\1\0\33\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11"+
    "\1\0\1\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11"+
    "\2\0\4\11\1\0\7\11\1\0\4\11\1\0\4\11\1\0\1\11"+
    "\1\0\12\11\1\0\21\11\5\0\3\11\1\0\5\11\1\0\21\11"+
    "\u1144\0\ua6d7\11\51\0\u1035\11\13\0\336\11\u3fe2\0\u021e\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\12\36\0\140\12\200\0\360\12\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\1\12\1\13\1\14\1\15\1\5\20\10"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\46\1\47\1\1\1\50\2\51\1\52\1\1\1\53"+
    "\1\54\1\0\1\11\1\55\1\11\1\0\3\11\2\55"+
    "\2\0\1\56\20\10\1\57\1\60\3\10\1\61\11\10"+
    "\1\62\2\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\2\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\0\4\11\1\55\2\0\15\10"+
    "\1\105\3\10\1\106\1\107\10\10\1\110\5\10\1\111"+
    "\1\10\1\63\1\74\1\54\3\11\1\0\2\10\1\112"+
    "\3\10\1\113\6\10\1\114\1\10\1\115\1\10\1\116"+
    "\13\10\1\117\1\120\3\11\1\0\1\121\4\10\1\122"+
    "\1\123\1\124\1\10\1\125\1\10\1\126\7\10\1\127"+
    "\2\10\1\130\1\131\3\11\1\0\1\132\1\10\1\133"+
    "\2\10\1\134\1\135\1\10\1\136\2\10\1\137\3\10"+
    "\3\11\1\0\1\140\5\10\1\141\1\142\1\10\3\11"+
    "\1\0\1\143\1\144\2\10\1\145\1\146\3\11\1\0"+
    "\1\10\1\147\3\11\1\0\1\150\1\0\2\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\55\1\0\5\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\347\0\347\0\u0181"+
    "\0\347\0\347\0\u01ce\0\u021b\0\u0268\0\u02b5\0\u0302\0\347"+
    "\0\347\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u051d"+
    "\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785"+
    "\0\u07d2\0\u081f\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\u086c\0\u08b9\0\347\0\347\0\u0906\0\u0953\0\u09a0"+
    "\0\347\0\347\0\u09ed\0\347\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21"+
    "\0\347\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\347\0\u0ca2\0\u0cef"+
    "\0\u0d3c\0\347\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a"+
    "\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172"+
    "\0\u11bf\0\u120c\0\u1259\0\u01ce\0\u12a6\0\u12f3\0\u1340\0\u01ce"+
    "\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8"+
    "\0\u15f5\0\347\0\u1642\0\u168f\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\347\0\347\0\u16dc\0\u1729\0\347\0\347"+
    "\0\347\0\347\0\347\0\347\0\347\0\347\0\u1776\0\u17c3"+
    "\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b"+
    "\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93"+
    "\0\u1ce0\0\u1d2d\0\u1d7a\0\u01ce\0\u1dc7\0\u1e14\0\u1e61\0\u01ce"+
    "\0\u01ce\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c"+
    "\0\u20c9\0\u01ce\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u01ce"+
    "\0\u2297\0\347\0\347\0\347\0\u22e4\0\u2331\0\u237e\0\u23cb"+
    "\0\u2418\0\u2465\0\u01ce\0\u24b2\0\u24ff\0\u254c\0\u01ce\0\u2599"+
    "\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u01ce\0\u2767\0\u01ce"+
    "\0\u27b4\0\u01ce\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982"+
    "\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u01ce\0\u01ce\0\u2b50"+
    "\0\u2b9d\0\u2bea\0\u2c37\0\u01ce\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u2db8\0\u01ce\0\u2e05\0\u01ce\0\u2e52"+
    "\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u01ce\0\u306d"+
    "\0\u30ba\0\u01ce\0\u01ce\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u01ce"+
    "\0\u323b\0\u01ce\0\u3288\0\u32d5\0\u01ce\0\u01ce\0\u3322\0\u01ce"+
    "\0\u336f\0\u33bc\0\u01ce\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d"+
    "\0\u358a\0\u35d7\0\u01ce\0\u3624\0\u3671\0\u36be\0\u370b\0\u3758"+
    "\0\u01ce\0\u01ce\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u01ce"+
    "\0\u01ce\0\u3926\0\u3973\0\u01ce\0\u01ce\0\u39c0\0\u3a0d\0\u3a5a"+
    "\0\u3aa7\0\u3af4\0\u01ce\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u01ce"+
    "\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90"+
    "\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8"+
    "\0\u4145\0\u4192\0\u41df\0\u422c\0\u422c\0\u4279\0\u42c6\0\u4313"+
    "\0\u4360\0\u43ad\0\u43fa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\4\1\13\1\4\1\14\1\15\3\13\3\15\1\13"+
    "\1\16\1\13\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\13\1\27\1\30\1\31\1\13\1\32"+
    "\1\13\1\33\1\34\1\35\1\36\1\13\1\37\2\13"+
    "\1\40\1\13\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\5\15\1\72\1\73\1\74\24\72"+
    "\1\75\1\72\1\76\63\72\1\77\1\100\1\101\25\77"+
    "\1\102\1\103\63\77\117\0\1\104\116\0\1\105\1\106"+
    "\117\0\14\13\1\0\1\13\4\0\27\13\12\0\1\13"+
    "\14\0\5\13\13\0\1\107\1\110\1\111\1\112\1\0"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\6\0\1\120"+
    "\6\0\1\111\4\0\1\116\1\0\1\116\1\112\34\0"+
    "\1\113\2\115\1\110\1\115\13\0\2\15\1\111\2\0"+
    "\3\15\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\5\15\13\0\2\117"+
    "\3\0\3\117\65\0\5\117\110\0\1\121\10\0\1\122"+
    "\120\0\14\13\1\0\1\13\4\0\1\13\1\123\25\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\2\13\1\124\24\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\11\13\1\125\7\13"+
    "\1\126\5\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\5\13\1\127\21\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\3\13"+
    "\1\130\5\13\1\131\1\132\14\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\15\13\1\133"+
    "\7\13\1\134\1\13\12\0\1\13\14\0\5\13\10\0"+
    "\14\13\1\0\1\13\4\0\1\13\1\135\6\13\1\136"+
    "\12\13\1\137\3\13\12\0\1\13\14\0\5\13\10\0"+
    "\14\13\1\0\1\13\4\0\2\13\1\140\24\13\12\0"+
    "\1\13\14\0\5\13\10\0\14\13\1\0\1\13\4\0"+
    "\2\13\1\141\12\13\1\142\11\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\13\13\1\143"+
    "\4\13\1\144\3\13\1\145\2\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\13\13\1\146"+
    "\13\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\2\13\1\147\7\13\1\150\14\13\12\0"+
    "\1\13\14\0\5\13\10\0\14\13\1\0\1\13\4\0"+
    "\3\13\1\151\6\13\1\152\1\13\1\153\1\154\11\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\14\13\1\155\12\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\10\13\1\156\3\13"+
    "\1\157\12\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\3\13\1\160\6\13\1\161\14\13"+
    "\12\0\1\13\14\0\5\13\1\72\2\0\24\72\1\0"+
    "\1\72\1\0\63\72\2\0\1\74\112\0\1\162\2\0"+
    "\3\162\3\0\2\162\1\163\4\162\2\163\1\164\4\162"+
    "\1\165\1\166\1\167\1\170\1\171\5\162\1\172\3\162"+
    "\1\173\4\162\1\174\35\162\1\163\2\164\1\162\1\164"+
    "\1\77\2\0\25\77\2\0\63\77\2\0\1\101\112\0"+
    "\1\162\2\0\3\162\3\0\2\162\1\175\4\162\2\175"+
    "\1\176\4\162\1\177\1\200\1\201\1\202\1\203\5\162"+
    "\1\204\3\162\1\205\4\162\1\206\35\162\1\175\2\176"+
    "\1\162\1\176\1\105\2\0\3\105\3\0\104\105\5\106"+
    "\1\207\107\106\13\0\1\107\1\110\1\111\2\0\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\6\0\1\120\6\0"+
    "\1\111\4\0\1\116\1\0\1\116\35\0\1\113\2\115"+
    "\1\110\1\115\13\0\2\110\3\0\3\110\1\116\1\117"+
    "\1\120\6\0\1\120\13\0\1\116\1\0\1\116\35\0"+
    "\5\110\13\0\1\210\1\211\2\0\5\211\1\0\1\211"+
    "\4\0\1\211\1\0\2\211\1\0\1\211\10\0\1\211"+
    "\1\0\1\211\35\0\5\211\13\0\1\212\1\110\1\111"+
    "\2\0\3\212\1\116\1\117\1\120\6\0\1\120\6\0"+
    "\1\111\4\0\1\116\1\0\1\116\35\0\3\212\1\110"+
    "\1\212\13\0\1\115\1\110\1\111\2\0\3\115\1\116"+
    "\1\117\1\120\6\0\1\120\6\0\1\111\4\0\1\116"+
    "\1\0\1\116\35\0\3\115\1\110\1\115\13\0\1\213"+
    "\1\110\1\111\2\0\3\213\1\116\1\117\1\120\6\0"+
    "\1\120\6\0\1\111\4\0\1\116\1\0\1\116\35\0"+
    "\3\213\1\110\1\213\13\0\2\117\3\0\3\117\1\116"+
    "\1\0\1\120\6\0\1\120\13\0\1\116\1\0\1\116"+
    "\35\0\5\117\13\0\2\214\3\0\3\214\3\0\1\215"+
    "\54\0\1\215\4\0\5\214\21\0\1\216\103\0\14\13"+
    "\1\0\1\13\4\0\2\13\1\217\24\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\7\13"+
    "\1\220\17\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\6\13\1\221\20\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\7\13"+
    "\1\222\12\13\1\223\4\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\7\13\1\224\17\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\6\13\1\225\1\226\17\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\3\13\1\227"+
    "\23\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\13\13\1\230\13\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\22\13\1\231"+
    "\4\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\14\13\1\232\12\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\15\13\1\233"+
    "\5\13\1\234\3\13\12\0\1\13\14\0\5\13\10\0"+
    "\14\13\1\0\1\13\4\0\1\13\1\235\12\13\1\236"+
    "\12\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\22\13\1\237\4\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\7\13\1\240"+
    "\17\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\25\13\1\241\1\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\11\13\1\242"+
    "\15\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\6\13\1\243\20\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\22\13\1\244"+
    "\4\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\16\13\1\245\10\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\1\246\10\13"+
    "\1\247\6\13\1\250\6\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\11\13\1\251\15\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\1\13\1\252\25\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\13\13\1\253\13\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\13\13\1\254\13\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\2\13\1\255\24\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\14\13\1\256\12\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\7\13\1\257\17\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\1\13\1\260\25\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\14\13\1\261\12\13"+
    "\12\0\1\13\14\0\5\13\13\0\1\164\4\0\3\164"+
    "\65\0\3\164\1\0\1\164\13\0\1\262\4\0\3\262"+
    "\65\0\3\262\1\0\1\262\13\0\1\176\4\0\3\176"+
    "\65\0\3\176\1\0\1\176\13\0\1\263\4\0\3\263"+
    "\65\0\3\263\1\0\1\263\4\106\1\264\1\207\107\106"+
    "\13\0\1\210\1\211\1\111\1\0\5\211\1\0\1\211"+
    "\4\0\1\211\1\0\2\211\1\0\1\211\3\0\1\111"+
    "\4\0\1\211\1\0\1\211\35\0\5\211\13\0\2\265"+
    "\1\111\1\0\5\265\1\0\1\265\4\0\1\265\1\0"+
    "\2\265\1\0\1\265\3\0\1\111\4\0\1\265\1\0"+
    "\1\265\35\0\5\265\13\0\1\266\1\110\1\111\2\0"+
    "\3\266\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\3\266\1\110\1\266"+
    "\13\0\1\267\1\110\1\111\2\0\3\267\1\116\1\117"+
    "\1\120\6\0\1\120\6\0\1\111\4\0\1\116\1\0"+
    "\1\116\35\0\3\267\1\110\1\267\13\0\2\214\3\0"+
    "\3\214\1\116\24\0\1\116\1\0\1\116\35\0\5\214"+
    "\13\0\2\214\3\0\3\214\65\0\5\214\111\0\1\270"+
    "\13\0\14\13\1\0\1\13\4\0\3\13\1\271\23\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\15\13\1\272\11\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\2\13\1\273\24\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\2\13\1\274\24\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\12\13\1\275\14\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\14\13\1\276\12\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\2\13\1\277\24\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\5\13\1\300\21\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\6\13\1\301\20\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\6\13\1\302\1\303\17\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\2\13\1\304"+
    "\24\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\7\13\1\305\17\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\2\13\1\306"+
    "\24\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\12\13\1\307\14\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\6\13\1\310"+
    "\20\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\2\13\1\311\24\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\11\13\1\312"+
    "\15\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\7\13\1\313\17\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\12\13\1\314"+
    "\14\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\2\13\1\315\24\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\15\13\1\316"+
    "\11\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\2\13\1\317\24\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\3\13\1\320"+
    "\23\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\6\13\1\321\20\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\3\13\1\322"+
    "\23\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\5\13\1\323\21\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\11\13\1\324"+
    "\15\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\11\13\1\325\15\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\10\13\1\326"+
    "\16\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\16\13\1\327\10\13\12\0\1\13\14\0"+
    "\5\13\13\0\2\330\1\111\1\0\5\330\1\0\1\330"+
    "\4\0\1\330\1\0\2\330\1\0\1\330\3\0\1\111"+
    "\4\0\1\330\1\0\1\330\35\0\5\330\13\0\1\331"+
    "\1\110\1\111\2\0\3\331\1\116\1\117\1\120\6\0"+
    "\1\120\6\0\1\111\4\0\1\116\1\0\1\116\35\0"+
    "\3\331\1\110\1\331\13\0\1\332\1\110\1\111\2\0"+
    "\3\332\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\3\332\1\110\1\332"+
    "\112\0\1\333\12\0\14\13\1\0\1\13\4\0\4\13"+
    "\1\334\22\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\1\13\1\335\25\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\13\13"+
    "\1\336\13\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\1\13\1\337\25\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\26\13"+
    "\1\340\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\10\13\1\341\16\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\6\13\1\342"+
    "\20\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\7\13\1\343\17\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\14\13\1\344"+
    "\12\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\1\13\1\345\25\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\5\13\1\346"+
    "\21\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\25\13\1\347\1\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\12\13\1\350"+
    "\14\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\3\13\1\351\23\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\1\13\1\352"+
    "\25\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\20\13\1\353\6\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\17\13\1\354"+
    "\7\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\7\13\1\355\17\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\15\13\1\356"+
    "\11\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\2\13\1\357\24\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\11\13\1\360"+
    "\15\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\7\13\1\361\17\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\16\13\1\362"+
    "\10\13\12\0\1\13\14\0\5\13\10\0\14\13\1\0"+
    "\1\13\4\0\2\13\1\363\24\13\12\0\1\13\14\0"+
    "\5\13\13\0\2\364\1\111\1\0\5\364\1\0\1\364"+
    "\4\0\1\364\1\0\2\364\1\0\1\364\3\0\1\111"+
    "\4\0\1\364\1\0\1\364\35\0\5\364\13\0\1\365"+
    "\1\110\1\111\2\0\3\365\1\116\1\117\1\120\6\0"+
    "\1\120\6\0\1\111\4\0\1\116\1\0\1\116\35\0"+
    "\3\365\1\110\1\365\13\0\1\366\1\110\1\111\2\0"+
    "\3\366\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\3\366\1\110\1\366"+
    "\111\0\1\367\13\0\14\13\1\0\1\13\4\0\13\13"+
    "\1\370\13\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\16\13\1\371\10\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\7\13"+
    "\1\372\17\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\14\13\1\373\12\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\13\13"+
    "\1\374\13\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\10\13\1\375\16\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\20\13"+
    "\1\376\6\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\13\13\1\377\13\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\7\13"+
    "\1\u0100\17\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\14\13\1\u0101\12\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\17\13"+
    "\1\u0102\7\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\2\13\1\u0103\24\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\11\13"+
    "\1\u0104\15\13\12\0\1\13\14\0\5\13\10\0\14\13"+
    "\1\0\1\13\4\0\11\13\1\u0105\15\13\12\0\1\13"+
    "\14\0\5\13\10\0\14\13\1\0\1\13\4\0\14\13"+
    "\1\u0106\12\13\12\0\1\13\14\0\5\13\13\0\2\u0107"+
    "\1\111\1\0\5\u0107\1\0\1\u0107\4\0\1\u0107\1\0"+
    "\2\u0107\1\0\1\u0107\3\0\1\111\4\0\1\u0107\1\0"+
    "\1\u0107\35\0\5\u0107\13\0\1\u0108\1\110\1\111\2\0"+
    "\3\u0108\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\3\u0108\1\110\1\u0108"+
    "\13\0\1\u0109\1\110\1\111\2\0\3\u0109\1\116\1\117"+
    "\1\120\6\0\1\120\6\0\1\111\4\0\1\116\1\0"+
    "\1\116\35\0\3\u0109\1\110\1\u0109\113\0\1\u010a\11\0"+
    "\14\13\1\0\1\13\4\0\6\13\1\u010b\20\13\12\0"+
    "\1\13\14\0\5\13\10\0\14\13\1\0\1\13\4\0"+
    "\7\13\1\u010c\17\13\12\0\1\13\14\0\5\13\10\0"+
    "\14\13\1\0\1\13\4\0\15\13\1\u010d\11\13\12\0"+
    "\1\13\14\0\5\13\10\0\14\13\1\0\1\13\4\0"+
    "\5\13\1\u010e\21\13\12\0\1\13\14\0\5\13\10\0"+
    "\14\13\1\0\1\13\4\0\13\13\1\u010f\13\13\12\0"+
    "\1\13\14\0\5\13\10\0\14\13\1\0\1\13\4\0"+
    "\2\13\1\u0110\24\13\12\0\1\13\14\0\5\13\10\0"+
    "\14\13\1\0\1\13\4\0\7\13\1\u0111\17\13\12\0"+
    "\1\13\14\0\5\13\10\0\14\13\1\0\1\13\4\0"+
    "\23\13\1\u0112\3\13\12\0\1\13\14\0\5\13\10\0"+
    "\14\13\1\0\1\13\4\0\12\13\1\u0113\14\13\12\0"+
    "\1\13\14\0\5\13\13\0\2\u0114\1\111\1\0\5\u0114"+
    "\1\0\1\u0114\4\0\1\u0114\1\0\2\u0114\1\0\1\u0114"+
    "\3\0\1\111\4\0\1\u0114\1\0\1\u0114\35\0\5\u0114"+
    "\13\0\1\u0115\1\110\1\111\2\0\3\u0115\1\116\1\117"+
    "\1\120\6\0\1\120\6\0\1\111\4\0\1\116\1\0"+
    "\1\116\35\0\3\u0115\1\110\1\u0115\13\0\1\u0116\1\110"+
    "\1\111\2\0\3\u0116\1\116\1\117\1\120\6\0\1\120"+
    "\6\0\1\111\4\0\1\116\1\0\1\116\35\0\3\u0116"+
    "\1\110\1\u0116\20\0\1\u0117\104\0\14\13\1\0\1\13"+
    "\4\0\23\13\1\u0118\3\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\2\13\1\u0119\24\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\2\13\1\u011a\24\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\2\13\1\u011b\24\13"+
    "\12\0\1\13\14\0\5\13\10\0\14\13\1\0\1\13"+
    "\4\0\1\13\1\u011c\25\13\12\0\1\13\14\0\5\13"+
    "\10\0\14\13\1\0\1\13\4\0\13\13\1\u011d\13\13"+
    "\12\0\1\13\14\0\5\13\13\0\2\u011e\1\111\1\0"+
    "\5\u011e\1\0\1\u011e\4\0\1\u011e\1\0\2\u011e\1\0"+
    "\1\u011e\3\0\1\111\4\0\1\u011e\1\0\1\u011e\35\0"+
    "\5\u011e\13\0\1\u011f\1\110\1\111\2\0\3\u011f\1\116"+
    "\1\117\1\120\6\0\1\120\6\0\1\111\4\0\1\116"+
    "\1\0\1\116\35\0\3\u011f\1\110\1\u011f\13\0\1\u0120"+
    "\1\110\1\111\2\0\3\u0120\1\116\1\117\1\120\6\0"+
    "\1\120\6\0\1\111\4\0\1\116\1\0\1\116\35\0"+
    "\3\u0120\1\110\1\u0120\114\0\1\u0121\10\0\14\13\1\0"+
    "\1\13\4\0\12\13\1\u0122\14\13\12\0\1\13\14\0"+
    "\5\13\10\0\14\13\1\0\1\13\4\0\16\13\1\u0123"+
    "\10\13\12\0\1\13\14\0\5\13\13\0\2\u0124\1\111"+
    "\1\0\5\u0124\1\0\1\u0124\4\0\1\u0124\1\0\2\u0124"+
    "\1\0\1\u0124\3\0\1\111\4\0\1\u0124\1\0\1\u0124"+
    "\35\0\5\u0124\13\0\1\u0125\1\110\1\111\2\0\3\u0125"+
    "\1\116\1\117\1\120\6\0\1\120\6\0\1\111\4\0"+
    "\1\116\1\0\1\116\35\0\3\u0125\1\110\1\u0125\13\0"+
    "\1\u0126\1\110\1\111\2\0\3\u0126\1\116\1\117\1\120"+
    "\6\0\1\120\6\0\1\111\4\0\1\116\1\0\1\116"+
    "\35\0\3\u0126\1\110\1\u0126\111\0\1\u0127\13\0\14\13"+
    "\1\0\1\13\4\0\20\13\1\u0128\6\13\12\0\1\13"+
    "\14\0\5\13\13\0\2\u0129\1\111\1\0\5\u0129\1\0"+
    "\1\u0129\4\0\1\u0129\1\0\2\u0129\1\0\1\u0129\3\0"+
    "\1\111\4\0\1\u0129\1\0\1\u0129\35\0\5\u0129\13\0"+
    "\1\u012a\1\110\1\111\2\0\3\u012a\1\116\1\117\1\120"+
    "\6\0\1\120\6\0\1\111\4\0\1\116\1\0\1\116"+
    "\35\0\3\u012a\1\110\1\u012a\13\0\1\u012b\1\110\1\111"+
    "\2\0\3\u012b\1\116\1\117\1\120\6\0\1\120\6\0"+
    "\1\111\4\0\1\116\1\0\1\116\35\0\3\u012b\1\110"+
    "\1\u012b\113\0\1\111\14\0\2\u012c\1\111\1\0\5\u012c"+
    "\1\0\1\u012c\4\0\1\u012c\1\0\2\u012c\1\0\1\u012c"+
    "\3\0\1\111\4\0\1\u012c\1\0\1\u012c\35\0\5\u012c"+
    "\13\0\1\u012d\1\110\1\111\2\0\3\u012d\1\116\1\117"+
    "\1\120\6\0\1\120\6\0\1\111\4\0\1\116\1\0"+
    "\1\116\35\0\3\u012d\1\110\1\u012d\13\0\1\u012e\1\110"+
    "\1\111\2\0\3\u012e\1\116\1\117\1\120\6\0\1\120"+
    "\6\0\1\111\4\0\1\116\1\0\1\116\35\0\3\u012e"+
    "\1\110\1\u012e\13\0\2\u012f\1\111\1\0\5\u012f\1\0"+
    "\1\u012f\4\0\1\u012f\1\0\2\u012f\1\0\1\u012f\3\0"+
    "\1\111\4\0\1\u012f\1\0\1\u012f\35\0\5\u012f\13\0"+
    "\1\u0130\1\110\1\111\2\0\3\u0130\1\116\1\117\1\120"+
    "\6\0\1\120\6\0\1\111\4\0\1\116\1\0\1\116"+
    "\35\0\3\u0130\1\110\1\u0130\13\0\1\u0131\1\110\1\111"+
    "\2\0\3\u0131\1\116\1\117\1\120\6\0\1\120\6\0"+
    "\1\111\4\0\1\116\1\0\1\116\35\0\3\u0131\1\110"+
    "\1\u0131\13\0\2\u0132\1\111\1\0\5\u0132\1\0\1\u0132"+
    "\4\0\1\u0132\1\0\2\u0132\1\0\1\u0132\3\0\1\111"+
    "\4\0\1\u0132\1\0\1\u0132\35\0\5\u0132\13\0\1\u0133"+
    "\1\110\1\111\2\0\3\u0133\1\116\1\117\1\120\6\0"+
    "\1\120\6\0\1\111\4\0\1\116\1\0\1\116\35\0"+
    "\3\u0133\1\110\1\u0133\13\0\1\u0134\1\110\1\111\2\0"+
    "\3\u0134\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\3\u0134\1\110\1\u0134"+
    "\13\0\2\u0135\1\111\1\0\5\u0135\1\0\1\u0135\4\0"+
    "\1\u0135\1\0\2\u0135\1\0\1\u0135\3\0\1\111\4\0"+
    "\1\u0135\1\0\1\u0135\35\0\5\u0135\13\0\1\u0136\1\110"+
    "\1\111\2\0\3\u0136\1\116\1\117\1\120\6\0\1\120"+
    "\6\0\1\111\4\0\1\116\1\0\1\116\35\0\3\u0136"+
    "\1\110\1\u0136\13\0\1\u0137\1\110\1\111\2\0\3\u0137"+
    "\1\116\1\117\1\120\6\0\1\120\6\0\1\111\4\0"+
    "\1\116\1\0\1\116\35\0\3\u0137\1\110\1\u0137\13\0"+
    "\2\u0138\1\111\1\0\5\u0138\1\0\1\u0138\4\0\1\u0138"+
    "\1\0\2\u0138\1\0\1\u0138\3\0\1\111\4\0\1\u0138"+
    "\1\0\1\u0138\35\0\5\u0138\13\0\1\u0139\1\110\1\111"+
    "\2\0\3\u0139\1\116\1\117\1\120\6\0\1\120\6\0"+
    "\1\111\4\0\1\116\1\0\1\116\35\0\3\u0139\1\110"+
    "\1\u0139\13\0\1\u013a\1\110\1\111\2\0\3\u013a\1\116"+
    "\1\117\1\120\6\0\1\120\6\0\1\111\4\0\1\116"+
    "\1\0\1\116\35\0\3\u013a\1\110\1\u013a\13\0\2\u013b"+
    "\1\111\1\0\5\u013b\1\0\1\u013b\4\0\1\u013b\1\0"+
    "\2\u013b\1\0\1\u013b\3\0\1\111\4\0\1\u013b\1\0"+
    "\1\u013b\35\0\5\u013b\13\0\1\u013c\1\110\1\111\2\0"+
    "\3\u013c\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\3\u013c\1\110\1\u013c"+
    "\13\0\1\u013d\1\110\1\111\2\0\3\u013d\1\116\1\117"+
    "\1\120\6\0\1\120\6\0\1\111\4\0\1\116\1\0"+
    "\1\116\35\0\3\u013d\1\110\1\u013d\13\0\2\u013e\1\111"+
    "\1\0\5\u013e\1\0\1\u013e\4\0\1\u013e\1\0\2\u013e"+
    "\1\0\1\u013e\3\0\1\111\4\0\1\u013e\1\0\1\u013e"+
    "\35\0\5\u013e\13\0\1\u013f\1\110\1\111\2\0\3\u013f"+
    "\1\116\1\117\1\120\6\0\1\120\6\0\1\111\4\0"+
    "\1\116\1\0\1\116\35\0\3\u013f\1\110\1\u013f\15\0"+
    "\1\111\25\0\1\111\64\0\1\u0140\1\110\1\111\2\0"+
    "\3\u0140\1\116\1\117\1\120\6\0\1\120\6\0\1\111"+
    "\4\0\1\116\1\0\1\116\35\0\3\u0140\1\110\1\u0140"+
    "\13\0\1\u0141\1\110\1\111\2\0\3\u0141\1\116\1\117"+
    "\1\120\6\0\1\120\6\0\1\111\4\0\1\116\1\0"+
    "\1\116\35\0\3\u0141\1\110\1\u0141\13\0\1\u0142\1\110"+
    "\1\111\2\0\3\u0142\1\116\1\117\1\120\6\0\1\120"+
    "\6\0\1\111\4\0\1\116\1\0\1\116\35\0\3\u0142"+
    "\1\110\1\u0142\13\0\1\u0143\1\110\1\111\2\0\3\u0143"+
    "\1\116\1\117\1\120\6\0\1\120\6\0\1\111\4\0"+
    "\1\116\1\0\1\116\35\0\3\u0143\1\110\1\u0143\13\0"+
    "\2\110\1\111\2\0\3\110\1\116\1\117\1\120\6\0"+
    "\1\120\6\0\1\111\4\0\1\116\1\0\1\116\35\0"+
    "\5\110";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17479];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\1\1\2\11\5\1\2\11"+
    "\21\1\27\11\2\1\2\11\3\1\2\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\11\1\0\3\1\1\11\1\1"+
    "\2\0\1\11\37\1\1\11\2\1\10\11\2\1\10\11"+
    "\1\0\5\1\2\0\43\1\3\11\3\1\1\0\42\1"+
    "\1\0\33\1\1\0\22\1\1\0\14\1\1\0\11\1"+
    "\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  StringBuilder char_string = new StringBuilder();
  public final int getStringLength(){
    return string.length()+2;
  }
  public final int getChar_StringLength(){
    return char_string.length()+2;
  }
  public final int getHtml_ValueLength(){
    return yylength()-3;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2896) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaScriptType next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return JavaScriptType.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 105: break;
          case 2: 
            { return JavaScriptType.ENTER;
            }
          case 106: break;
          case 3: 
            { return JavaScriptType.NEWLINE;
            }
          case 107: break;
          case 4: 
            { return JavaScriptType.TAB;
            }
          case 108: break;
          case 5: 
            { return JavaScriptType.DIV;
            }
          case 109: break;
          case 6: 
            { return JavaScriptType.MULT;
            }
          case 110: break;
          case 7: 
            { return JavaScriptType.NEWPAGE;
            }
          case 111: break;
          case 8: 
            { return JavaScriptType.IDENTIFIER;
            }
          case 112: break;
          case 9: 
            { return JavaScriptType.INTEGER_LITERAL;
            }
          case 113: break;
          case 10: 
            { return JavaScriptType.DOT;
            }
          case 114: break;
          case 11: 
            { return JavaScriptType.MINUS;
            }
          case 115: break;
          case 12: 
            { yybegin(STRING); string.setLength(0);
            }
          case 116: break;
          case 13: 
            { yybegin(CHARLITERAL);char_string.setLength(0);
            }
          case 117: break;
          case 14: 
            { return JavaScriptType.LPAREN;
            }
          case 118: break;
          case 15: 
            { return JavaScriptType.RPAREN;
            }
          case 119: break;
          case 16: 
            { return JavaScriptType.LBRACE;
            }
          case 120: break;
          case 17: 
            { return JavaScriptType.RBRACE;
            }
          case 121: break;
          case 18: 
            { return JavaScriptType.LBRACK;
            }
          case 122: break;
          case 19: 
            { return JavaScriptType.RBRACK;
            }
          case 123: break;
          case 20: 
            { return JavaScriptType.SEMICOLON;
            }
          case 124: break;
          case 21: 
            { return JavaScriptType.COMMA;
            }
          case 125: break;
          case 22: 
            { return JavaScriptType.EQ;
            }
          case 126: break;
          case 23: 
            { return JavaScriptType.SPACE;
            }
          case 127: break;
          case 24: 
            { return JavaScriptType.BACKSPACE;
            }
          case 128: break;
          case 25: 
            { return JavaScriptType.GT;
            }
          case 129: break;
          case 26: 
            { return JavaScriptType.LT;
            }
          case 130: break;
          case 27: 
            { return JavaScriptType.NOT;
            }
          case 131: break;
          case 28: 
            { return JavaScriptType.COMP;
            }
          case 132: break;
          case 29: 
            { return JavaScriptType.QUESTION;
            }
          case 133: break;
          case 30: 
            { return JavaScriptType.AT;
            }
          case 134: break;
          case 31: 
            { return JavaScriptType.COLON;
            }
          case 135: break;
          case 32: 
            { return JavaScriptType.PLUS;
            }
          case 136: break;
          case 33: 
            { return JavaScriptType.AND;
            }
          case 137: break;
          case 34: 
            { return JavaScriptType.OR;
            }
          case 138: break;
          case 35: 
            { return JavaScriptType.XOR;
            }
          case 139: break;
          case 36: 
            { return JavaScriptType.MOD;
            }
          case 140: break;
          case 37: 
            { string.append( yytext() );
            }
          case 141: break;
          case 38: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 142: break;
          case 39: 
            { yybegin(YYINITIAL); return JavaScriptType.STRING_LITERAL;
            }
          case 143: break;
          case 40: 
            { char_string.append( yytext() );
            }
          case 144: break;
          case 41: 
            { throw new RuntimeException("Unterminated char_string at end of line");
            }
          case 145: break;
          case 42: 
            { yybegin(YYINITIAL); return JavaScriptType.CHAR_LITERAL;
            }
          case 146: break;
          case 43: 
            { /* ignore */
            }
          case 147: break;
          case 44: 
            { return JavaScriptType.COMMENTS;
            }
          case 148: break;
          case 45: 
            { return JavaScriptType.FLOATING_POINT_LITERAL;
            }
          case 149: break;
          case 46: 
            { return JavaScriptType.DIV_COMMENT;
            }
          case 150: break;
          case 47: 
            { return JavaScriptType.IN;
            }
          case 151: break;
          case 48: 
            { return JavaScriptType.IF;
            }
          case 152: break;
          case 49: 
            { return JavaScriptType.DO;
            }
          case 153: break;
          case 50: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 154: break;
          case 51: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 155: break;
          case 52: 
            { string.append( '\\' );string.append( '\"' );
            }
          case 156: break;
          case 53: 
            { string.append( '\\' );string.append( '\'' );
            }
          case 157: break;
          case 54: 
            { string.append( '\\' );string.append( '\\' );
            }
          case 158: break;
          case 55: 
            { string.append( '\\' );string.append( '\b' );
            }
          case 159: break;
          case 56: 
            { string.append( '\\' );string.append( '\r' );
            }
          case 160: break;
          case 57: 
            { string.append( '\\' );string.append( '\t' );
            }
          case 161: break;
          case 58: 
            { string.append( '\\' );string.append( '\n' );
            }
          case 162: break;
          case 59: 
            { string.append( '\\' );string.append( '\f' );
            }
          case 163: break;
          case 60: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   char_string.append( val );
            }
          case 164: break;
          case 61: 
            { char_string.append( '\\' );char_string.append( '\"' );
            }
          case 165: break;
          case 62: 
            { char_string.append( '\\' );char_string.append( '\'' );
            }
          case 166: break;
          case 63: 
            { char_string.append( '\\' );char_string.append( '\\' );
            }
          case 167: break;
          case 64: 
            { char_string.append( '\\' );char_string.append( '\b' );
            }
          case 168: break;
          case 65: 
            { char_string.append( '\\' );char_string.append( '\r' );
            }
          case 169: break;
          case 66: 
            { char_string.append( '\\' );char_string.append( '\t' );
            }
          case 170: break;
          case 67: 
            { char_string.append( '\\' );char_string.append( '\n' );
            }
          case 171: break;
          case 68: 
            { char_string.append( '\\' );char_string.append( '\f' );
            }
          case 172: break;
          case 69: 
            { return JavaScriptType.TRY;
            }
          case 173: break;
          case 70: 
            { return JavaScriptType.LET;
            }
          case 174: break;
          case 71: 
            { return JavaScriptType.NEW;
            }
          case 175: break;
          case 72: 
            { return JavaScriptType.FOR;
            }
          case 176: break;
          case 73: 
            { return JavaScriptType.VAR;
            }
          case 177: break;
          case 74: 
            { return JavaScriptType.ELSE;
            }
          case 178: break;
          case 75: 
            { return JavaScriptType.CASE;
            }
          case 179: break;
          case 76: 
            { return JavaScriptType.TRUE;
            }
          case 180: break;
          case 77: 
            { return JavaScriptType.THIS;
            }
          case 181: break;
          case 78: 
            { return JavaScriptType.NULL;
            }
          case 182: break;
          case 79: 
            { return JavaScriptType.WITH;
            }
          case 183: break;
          case 80: 
            { return JavaScriptType.VOID;
            }
          case 184: break;
          case 81: 
            { return JavaScriptType.BREAK;
            }
          case 185: break;
          case 82: 
            { return JavaScriptType.CATCH;
            }
          case 186: break;
          case 83: 
            { return JavaScriptType.CLASS;
            }
          case 187: break;
          case 84: 
            { return JavaScriptType.CONST;
            }
          case 188: break;
          case 85: 
            { return JavaScriptType.SUPER;
            }
          case 189: break;
          case 86: 
            { return JavaScriptType.THROW;
            }
          case 190: break;
          case 87: 
            { return JavaScriptType.FALSE;
            }
          case 191: break;
          case 88: 
            { return JavaScriptType.YIELD;
            }
          case 192: break;
          case 89: 
            { return JavaScriptType.WHILE;
            }
          case 193: break;
          case 90: 
            { return JavaScriptType.RETURN;
            }
          case 194: break;
          case 91: 
            { return JavaScriptType.EXPORT;
            }
          case 195: break;
          case 92: 
            { return JavaScriptType.SWITCH;
            }
          case 196: break;
          case 93: 
            { return JavaScriptType.TYPEOF;
            }
          case 197: break;
          case 94: 
            { return JavaScriptType.IMPORT;
            }
          case 198: break;
          case 95: 
            { return JavaScriptType.DELETE;
            }
          case 199: break;
          case 96: 
            { return JavaScriptType.EXTEDNS;
            }
          case 200: break;
          case 97: 
            { return JavaScriptType.DEFAULT;
            }
          case 201: break;
          case 98: 
            { return JavaScriptType.FINALLY;
            }
          case 202: break;
          case 99: 
            { return JavaScriptType.LIBS_INTHIS;
            }
          case 203: break;
          case 100: 
            { return JavaScriptType.CONTINUE;
            }
          case 204: break;
          case 101: 
            { return JavaScriptType.DEBUGGER;
            }
          case 205: break;
          case 102: 
            { return JavaScriptType.FUNCTION;
            }
          case 206: break;
          case 103: 
            { return JavaScriptType.UNDEFINED;
            }
          case 207: break;
          case 104: 
            { return JavaScriptType.INSTANCEOF;
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
